#ifndef CNBIROS_SHAREDNAVIGATION_SHAREDDYNAMICS_CPP

#include "cnbiros_shared_navigation/SharedDynamics.hpp"

namespace cnbiros {
	namespace navigation {

SharedDynamics::SharedDynamics(void) : p_nh_("~") {

	this->n_rate_ = nullptr;

	// Dynamic reconfiguration
	this->n_dynreconfig_function_ = boost::bind(&SharedDynamics::reconfigure_callback, this, _1, _2);
	this->n_dynreconfig_server_.setCallback(this->n_dynreconfig_function_);

	// Configure node
	this->configure();

	// Initialize subscribers
    this->s_repellors_  = this->p_nh_.subscribe(this->t_repellors_, 1, &SharedDynamics::on_received_repellors, this);
    this->s_attractors_ = this->p_nh_.subscribe(this->t_attractors_, 1, &SharedDynamics::on_received_attractors, this);
    this->s_footprint_ = this->nh_.subscribe(this->t_footprint_, 1, &SharedDynamics::on_received_footprint, this);

	// Initialiaze publishers
	this->p_velocity_  = this->p_nh_.advertise<geometry_msgs::Twist>(this->t_velocity_, 1);
	this->p_visual_velocity_  = this->p_nh_.advertise<geometry_msgs::PoseStamped>(this->t_visual_velocity_, 1);

}

SharedDynamics::~SharedDynamics(void) {}

bool SharedDynamics::configure(void) {

	// Default topics
	this->t_repellors_		= "repellors";
	this->t_attractors_		= "attractors"; 
	this->t_footprint_		= "/move_base/local_costmap/footprint";
	this->t_velocity_		= "/cmd_vel";
	this->t_visual_velocity_ = "visual_velocity";

	this->robot_width_ = 1.0f;

	// Getting parameters

	this->p_nh_.param<bool>("enable_repellors",	 this->n_enable_repellors_, true);
	this->p_nh_.param<bool>("enable_attractors", this->n_enable_attractors_, true);
	this->p_nh_.param<float>("update_rate",	this->n_update_rate_, 10.0f);
	this->p_nh_.param<float>("publish_frequency",	this->publish_frequency_, 10.0f);

	// Robot parameters
	this->p_nh_.param<std::string>("robot_base_frame", this->robot_base_frame_, "base_link");
	
	// Velocity Dynamics parameters 
	this->p_nh_.param<float>("angular_velocity_min", this->dyn_angular_velocity_min_, 0.17f);
	this->p_nh_.param<float>("angular_velocity_max", this->dyn_angular_velocity_max_, 0.3f);
	this->p_nh_.param<float>("angular_repellors_strength", this->dyn_angular_repellors_strength_, 5.0f);
	this->p_nh_.param<float>("angular_repellors_decay", this->dyn_angular_repellors_decay_, 1.0f);
	this->p_nh_.param<float>("angular_repellors_occupancy", this->dyn_angular_repellors_occupancy_, 5.0f);
	
	this->p_nh_.param<float>("linear_velocity_min", this->dyn_linear_velocity_min_, 0.08f);
	this->p_nh_.param<float>("linear_velocity_max", this->dyn_linear_velocity_max_, 0.250f);
	this->p_nh_.param<float>("linear_velocity_weight", this->dyn_linear_velocity_weight_, 0.0f);
	this->p_nh_.param<float>("linear_safe_distance", this->dyn_linear_safe_distance_, 1.2f);

	// Initialize boolean states
	this->is_data_available_ = false;

	// Initialize update rate
	this->init_update_rate(this->n_update_rate_);

	// Create publish timer
	this->publish_timer_ = this->p_nh_.createTimer(ros::Duration(1.0f/this->publish_frequency_), &SharedDynamics::on_publish_velocity, this);

	return true;
}

void SharedDynamics::Run(void) {


	while(this->nh_.ok()) {

		// Compute velocity
		this->MakeVelocity();


		// Publish velocity
		//this->velocity_.header.frame_id = this->robot_base_frame_;
		//this->velocity_.header.stamp	= ros::Time::now();
		//this->p_velocity_.publish(this->velocity_);



		// Publish velocity as Pose
		//this->visual_velocity_.header.frame_id = this->robot_base_frame_;
		//this->visual_velocity_.header.stamp = ros::Time::now();
		//this->visual_velocity_.pose.position.x = 0.0;
		//this->visual_velocity_.pose.position.y = 0.0;
		//this->visual_velocity_.pose.orientation = tf::createQuaternionMsgFromYaw(this->velocity_.angular.z);
		//this->p_visual_velocity_.publish(this->visual_velocity_);
;

		ros::spinOnce();
		this->n_rate_->sleep();
	}
}


void SharedDynamics::MakeVelocity(void) {
	
	float vangular;
	float vangular_r	= 0.0f;
	float vangular_a	= 0.0f;
	float vlinear		= 0.0f;

	// Compute orientation for repellors
	if(this->n_enable_repellors_ == true) {
		vangular_r  = this->get_angular_velocity_repellors(this->pr_repellors_);
		ROS_DEBUG_NAMED("shareddynamics", "Repellor angular velocity: %f [deg/s]", rad2deg(vangular_r));
	}
	
	// Compute orientation for attractors
	if(this->n_enable_attractors_ == true) {
		vangular_a = this->get_angular_velocity_attractors(this->pr_attractors_);
		ROS_DEBUG_NAMED("shareddynamics", "Attractor angular velocity: %f [deg/s]", rad2deg(vangular_a));
	}

	vangular = vangular_a - vangular_r;

	// Compute linear velocity (repellors based)
	if(this->is_data_available_ == true)	
		vlinear = this->get_linear_velocity(this->pr_repellors_);


	vlinear = 0.0f;
	//printf("Linear velocity:  %f\n", vlinear);
	//printf("Angular velocity: %f\n", vangular);
	
	this->velocity_.linear.x	= vlinear;
	//this->velocity_.linear.x	= 0.0;
	this->velocity_.linear.y	= 0.0;
	this->velocity_.linear.z	= 0.0;
	this->velocity_.angular.x	= 0.0;
	this->velocity_.angular.y	= 0.0;
	this->velocity_.angular.z	= -vangular;

}


float SharedDynamics::get_angular_velocity_repellors(ProximitySector& sectors) {

	ProximitySectorConstIt it;
	float cdistance, cangle;
	float clambda, csigma, cdtheta;
	float cw;
	float w = 0.0f;
	float w_limited;
	float w_scaled;

	float cdpsi;
	float obs_size	 = 0.05f;
	float robot_size = 0.75f;
	float robot_front_size = 0.93f;		// with respect to base_link
	float safe_distance = 0.1f;
	float robot_width = 0.75f;
	float delta = this->dyn_angular_repellors_occupancy_;
	float hangle = M_PI/2.0f;
	float space_influence;

	// Iterate over the sectors
	for(it=sectors.Begin(); it!=sectors.End(); ++it) {
	
		// Discard empty sectors
		if(std::isinf((*it)) == true)
			continue;

		// Get current distance and angle
		cdistance	= sectors.GetRadius(it);
		cangle		= sectors.GetAngle(it) + M_PI/2.0f;
		
		// Check if the repellor is inside the projection with respect to the
		// current wheelchair heading direction (angle=0.0). If it is outside,
		// then discard the repellor. Correct the current angle for standard
		// coordinates.
		//if(this->is_projection_inside(cdistance, cangle+M_PI/2.0f, this->robot_width_) == false)
		//	continue;

		// Compute the contribution to the velocity
		clambda = this->dyn_angular_repellors_strength_*
				  exp(-( (cdistance - robot_front_size - safe_distance)/this->dyn_angular_repellors_decay_));

		if( cdistance < (robot_front_size + safe_distance) )
			clambda = this->dyn_angular_repellors_strength_;

		cdtheta = std::asin( (robot_width + safe_distance)/(cdistance) );

		if( cdistance < (robot_width + safe_distance) )
			cdtheta = M_PI/2.0f;

		csigma  = std::atan( std::tan(cdtheta/2.0f) 
				  + (robot_width + safe_distance)/(robot_width + safe_distance + cdistance ) );
		cw = clambda*(hangle-cangle)*std::exp(-(std::pow(hangle-cangle, 2))/2.0f*pow(csigma, 2));

		//space_influence = this->dyn_angular_repellors_decay_;


		//cdpsi = this->get_subtended_angle(cdistance, obs_size, robot_size);
		//cw = this->dyn_angular_repellors_strength_*this->get_angular_repellor_forcelet(hangle, cangle, cdpsi) * 
		//	 this->get_angular_repellor_range(hangle, cangle, cdpsi, delta) *
		//	 this->get_angular_repellor_decay(cdistance, obs_size, robot_size, space_influence);

		//printf("cw=%f\n", cw);
		w += cw;
	}

	// Limit the output velocity between -max and max
	w_limited = this->limit_range_value(w, -this->dyn_angular_velocity_max_,
										    this->dyn_angular_velocity_max_);

	// Scale the output velocity assuming that the absolute value of the input
	// is between [0 max] and the scaled range must be between [velocity_min
	// velocity_max]
	w_scaled  = this->scale_range_value(w_limited, 0.0f, this->dyn_angular_velocity_max_,
									    this->dyn_angular_velocity_min_, this->dyn_angular_velocity_max_);
											
	printf("Angular velocity: %f\n", w);
	printf("Angular velocity limited: %f\n", w_limited);
	printf("Angular velocity scaled:  %f\n", w_scaled);

	return w_scaled;
}


float SharedDynamics::scale_range_value(float x, float minx, float maxx, float miny, float maxy) {

	float	absx;
	float	signx = 1.0f;
	float	y;

	if(x < 0)
		signx = -signx;

	absx = std::fabs(x);

	y = signx*((maxy - miny)*( (absx - minx) / (maxx - minx) ) + miny);

	return y;
}

float SharedDynamics::limit_range_value(float x, float minx, float maxx) {

	float lx;

	lx = x;
	if(lx > maxx) 
		lx = maxx;
	else if (lx < minx)
		lx = minx;
	
	return lx;
}

float SharedDynamics::get_angular_attractor_forcelet(float phi, float psi, float tau) {
	
	float forcelet;

	forcelet = -tau*std::sin(phi - psi);

	return forcelet;
}

float SharedDynamics::get_angular_repellor_forcelet(float phi, float psi, float dpsitot) {
	float forcelet;

	forcelet = (phi - psi)*(1.0f/dpsitot)*std::exp(1.0 - std::fabs( (phi - psi)/dpsitot) );

	return forcelet;
}

float SharedDynamics::get_subtended_angle(float obs_distance, float obs_size, float robot_size) {

	float dpsitot;
	dpsitot = std::asin( (obs_size + robot_size) / (obs_distance + obs_size + robot_size) );

	return dpsitot;
}

float SharedDynamics::get_angular_repellor_range(float phi, float psi, float dpsitot, float delta) {

	float h1;
	float range;

	h1 = 4.0f/( std::cos(2.0f*dpsitot) - std::cos(2.0f*dpsitot + delta) );

	range = 0.5f* ( std::tanh( h1*( std::cos(phi - psi) - std::cos(2.0f*dpsitot + delta) ) ) + 1.0f );

	return  range;
}

float SharedDynamics::get_angular_repellor_decay(float obs_distance, float obs_size, float robot_size, float influence) {
	
	float decay;

	decay = std::exp(- ( (obs_distance + obs_size + robot_size)/influence) );
	return decay;
}

float SharedDynamics::get_angular_velocity_attractors(ProximitySector& sectors) {
	return this->get_angular_attractor_forcelet(M_PI/2.0, M_PI/2.0, 0.1f);
}

float SharedDynamics::get_linear_velocity(ProximitySector& sectors) {

	ProximitySectorConstIt it;
	float cdistance, cangle;
	float min_distance, max_distance;
	float min_vel, max_vel;
	float weight;
	float x;
	float y;
	float z;

	x = 6.0f;
	z = 0.0f;
	min_distance = this->dyn_linear_safe_distance_;
	max_distance = 4.0f;
	min_vel		 = this->dyn_linear_velocity_min_;
	max_vel		 = this->dyn_linear_velocity_max_;
	weight		 = this->dyn_linear_velocity_weight_;

	// Iterate over the sectors
	for(it=sectors.Begin(); it!=sectors.End(); ++it) {
		
		// Discard empty sectors
		if(std::isinf((*it)) == true)
			continue;
		
		// Get current distance and angle
		cdistance	= sectors.GetRadius(it);
		cangle		= sectors.GetAngle(it);

		// Check if the repellor is inside the projection with respect to the
		// current wheelchair heading direction (angle=0.0). If it is outside,
		// then discard the repellor. Correct the current angle for standard
		// coordinates.
		if(this->is_projection_inside(cdistance, cangle+M_PI/2.0f, this->robot_width_) == false)
			continue;

		if(cdistance < x) {
			 x = cdistance;
			 z = cangle;
		}
	}

	//printf("Closest obstacle at %3.2f [m] and %3.2f [deg]\n", x, this->rad2deg(z+M_PI/2.0f));
	if(this->is_projection_inside(x, z+M_PI/2.0f, this->robot_width_))
		//printf("And it is inside!\n");

	y = this->get_velocity_linear(x, min_distance, max_distance, min_vel, max_vel, weight);
	
//	//if(min_obstacle_distance < safe_obstacle_distance)
//	//	y = min_linear_velocity;
//	//else
//		y = m*(min_obstacle_distance - safe_obstacle_distance) + min_linear_velocity;
//
//
//	if(y > max_linear_velocity)
//		y = max_linear_velocity;
	
	//printf("Obstacle distance: %f\n", min_obstacle_distance);
	//printf("Safe distance: %f\n", safe_obstacle_distance);
	//printf("Min Linear velocity: %f\n", min_linear_velocity);

	return y;

}

float SharedDynamics::get_velocity_linear(float x, float x1, float x2, float y1, float y2, float weight) {

	float m, b, y;

	m = ( 1.0f/(1.0f + weight) )*( (y2 - y1)/(x2 - x1) );
	b = y1 - m*x1;

	y = m*x + b;
	
	if(x <= x1)
		y = y - 2.0f*y1;

	if(y > y2) 
		y = y2;
	else if(y < -y2)
		y = -y2;
	

	return y;
}

bool SharedDynamics::is_projection_inside(float distance, float angle, float width) {
	float projection;

	projection = std::fabs(distance*cos(angle));

	//printf("Projection is %3.2f, width is %3.2f\n", projection, width);
	if(std::fabs(distance*cos(angle)) <= width/2.0f)
		return true;
	else
		return false;
}

void SharedDynamics::on_publish_velocity(const ros::TimerEvent& event) {

	this->p_velocity_.publish(this->velocity_);

	ROS_INFO("Published velocity: v=%3.2f, o=%3.2f", this->velocity_.linear.x, this->velocity_.angular.z);


	this->visual_velocity_.header.frame_id = this->robot_base_frame_;
	this->visual_velocity_.header.stamp = ros::Time::now();
	this->visual_velocity_.pose.position.x = 0.0;
	this->visual_velocity_.pose.position.y = 0.0;
	this->visual_velocity_.pose.orientation = tf::createQuaternionMsgFromYaw(this->velocity_.angular.z);
	this->p_visual_velocity_.publish(this->visual_velocity_);
}

void SharedDynamics::on_received_repellors(const cnbiros_shared_navigation::ProximitySectorMsg& data) {

	// Set true the availability of repellors data (used for first iteration)
	ROS_WARN_ONCE("First proximity sector messaged received! Repellors data available.");
	this->is_data_available_ = true;
	
	// Convert and store repellor data
	if(ProximitySectorConverter::FromMessage(data, this->pr_repellors_) == false) {
		ROS_ERROR("Cannot convert repellor proximity sector message");
	}
}

void SharedDynamics::on_received_attractors(const cnbiros_shared_navigation::ProximitySectorMsg& data) {

	// Convert and store attractor data
	if(ProximitySectorConverter::FromMessage(data, this->pr_attractors_) == false) {
		ROS_ERROR("Cannot convert attractors proximity sector message");
	}
}

void SharedDynamics::on_received_footprint(const geometry_msgs::PolygonStamped& data) {

	this->get_robot_dimension(&(this->robot_lenght_), &(this->robot_width_), data.polygon);
	ROS_INFO_ONCE("Received robot footprint! Robot dimensions (length/width): (%f, %f) [m]",
					this->robot_lenght_, this->robot_width_);
}

void SharedDynamics::reconfigure_callback(cnbiros_shared_navigation::SharedDynamicsConfig &config, 
										uint32_t level) {

	// Angular minimum velocity
	if(this->update_if_different(config.angular_velocity_min, this->dyn_angular_velocity_min_))
		ROS_WARN("Updated angular velocity minimum to %f", this->dyn_angular_velocity_min_);
	
	// Angular maximum velocity
	if(this->update_if_different(config.angular_velocity_max, this->dyn_angular_velocity_max_))
		ROS_WARN("Updated angular velocity maximum to %f", this->dyn_angular_velocity_max_);
	
	// Angular repellors strength
	if(this->update_if_different(config.angular_repellors_strength, this->dyn_angular_repellors_strength_))
		ROS_WARN("Updated angular repellors strength to %f", this->dyn_angular_repellors_strength_);
	
	// Angular repellors decay
	if(this->update_if_different(config.angular_repellors_decay, this->dyn_angular_repellors_decay_))
		ROS_WARN("Updated angular repellors decay to %f", this->dyn_angular_repellors_decay_);
	
	// Angular repellors occupancy
	if(this->update_if_different(config.angular_repellors_occupancy, this->dyn_angular_repellors_occupancy_))
		ROS_WARN("Updated angular repellors occupancy to %f", this->dyn_angular_repellors_occupancy_);
	
	// Linear minimum velocity
	if(this->update_if_different(config.linear_velocity_min, this->dyn_linear_velocity_min_))
		ROS_WARN("Updated linear velocity minimum to %f", this->dyn_linear_velocity_min_);
	
	// Linear maximum velocity
	if(this->update_if_different(config.linear_velocity_max, this->dyn_linear_velocity_max_))
		ROS_WARN("Updated linear velocity maximum to %f", this->dyn_linear_velocity_max_);
	
	// Linear slope velocity
	if(this->update_if_different(config.linear_velocity_weight, this->dyn_linear_velocity_weight_))
		ROS_WARN("Updated linear velocity slowness to %f", this->dyn_linear_velocity_weight_);
	
	// Linear safe distance
	if(this->update_if_different(config.linear_safe_distance, this->dyn_linear_safe_distance_))
		ROS_WARN("Updated linear safe distance to %f", this->dyn_linear_safe_distance_);
	
	// Update rate
	if(this->update_if_different(config.update_rate, this->n_update_rate_)) {
		ROS_WARN("Updated rate to %f", this->n_update_rate_);
		this->init_update_rate(this->n_update_rate_);
	}
	
	// Publish frequency
	if(this->update_if_different(config.publish_frequency, this->publish_frequency_)) {
		ROS_WARN("Updated publish frequency to %f", this->publish_frequency_);
	    this->publish_timer_.setPeriod(ros::Duration(1.0f/this->publish_frequency_), true);
	}
}

void SharedDynamics::get_robot_dimension(float* lenght, float* width, geometry_msgs::Polygon polygon) {

	//std::vector<float> x;
	//std::vector<float> y;

	//for(auto it=polygon.points.begin(); it!=polygon.points.end(); ++it) {
	//	x.push_back((*it).x);
	//	y.push_back((*it).y);
	//}

	//auto xres = std::minmax_element(x.begin(), x.end());
	//auto yres = std::minmax_element(y.begin(), y.end());

	//*lenght = *xres.second - *xres.first;
	//*width  = *yres.second - *yres.first;
	*lenght = 1.6;
	*width  = 0.75;
}

float SharedDynamics::rad2deg(float radians) {
	return radians*180.0f/M_PI;
}


void SharedDynamics::init_update_rate(float rate) {
	if(this->n_rate_ != nullptr)
		delete this->n_rate_;

	this->n_rate_ = new ros::Rate(rate);
}


bool SharedDynamics::update_if_different(const float& first, float& second, float epsilon) {

	bool is_different = false;
	if(std::fabs(first - second) >= epsilon) {
		second = first;
		is_different = true;
	}

	return is_different;
}

	}
}



#endif
